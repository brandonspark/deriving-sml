sml
name LexMainFun
alphabet 256

set whitespace = (or 32 9 13 10)

set letter = (range 'A 'Z 'a 'z)
set lowercase = (range 'a 'z)
set digit = (range '0 '9)

set symbol = (or '! '# '$ '% '& '' '* '+ '- '. ': '< '= '> '? '@ '^ '| '~ '` '/)

set printable = (range 32 126)
set stringelem = (- printable '" '\)
set hexadecimal = (range '0 '9 'A 'F 'a 'f)

set path_part_no_dot =
  (or '` '_ '; ', '! '% '& '$ '+ '< '= '> '? '@ '~ '| '# '* '- '^ letter digit)
set path_part = (or path_part_no_dot '.)

regexp elem = (+ path_part)
regexp elem_no_dot = (+ path_part_no_dot)
regexp end = (seq path_part_no_dot (* path_part) '. (+ path_part_no_dot))
regexp path_no_abs = (seq (* (seq elem '/)) end)
regexp path = (or path_no_abs (seq '/ path_no_abs))

function main : t =
  (+ whitespace) => skip_main

  (or "group" "Group" "GROUP") =>
    enter_group

  (or "library" "Library" "LIBRARY") =>
    enter_library

  "(*" => enter_comment

  eos => unfinished
  epsilon => error

set not_whitespace = (~ whitespace)

function group_or_library : t =
  (+ whitespace) => skip_gl

  "is" => enter_is

  "(*" => enter_comment

  (+ not_whitespace) => analyze_gl

  eos => unfinished
  epsilon => error

function ifmode : u =
  (+ whitespace) => skip_if

  "#endif" => exit_if

  (+ not_whitespace) => skip_if

  eos => unfinished_if
  epsilon => error_if


function is : t =
  (+ whitespace) => skip_is

  path => is_stdpn

  "#if" => enter_if

  "(*" => enter_comment
  '" => enter_string

  eos => eof
  epsilon => error

function string : v =
  (+ stringelem) => string_elem

  "\n" => string_newline
  "\\" => string_backslash
  (seq '\ '") => string_quote
  (seq "\x" (= 2 hexadecimal)) => string_hex2
  (seq '\ (+ whitespace) '\) => string_skip

  '" => exit_string

  eos => unclosed_string
  epsilon => string_error

set comment_normal = (~ '( '*)

function comment : u =
  "(*" => reenter_comment
  "*)" => exit_comment

  '( => comment_skip
  '* => comment_skip

  (+ comment_normal) => comment_skip

  eos => unclosed_comment
  epsilon => comment_error
