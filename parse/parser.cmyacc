sml
name ParserFun

terminal UIDENT of identifier /* uppercase */
terminal LIDENT of identifier /* lowercase */
terminal SIDENT of identifier /* symbol */
terminal ULIDENT of identifier /* true */
terminal USIDENT of identifier /* :: */
terminal TYVAR of identifier
terminal NUMBER of int_span
terminal WORD of string_span
terminal REAL of real_span
terminal STRING of string_span
terminal CHAR of char_span
terminal LPAREN of span
terminal RPAREN of span
terminal LBRACKET of span
terminal RBRACKET of span
terminal LBRACE of span
terminal RBRACE of span
terminal ARROW of span precr 1
terminal BAR of span precr 0
terminal COLON of span precr 0
terminal COMMA of span
terminal DARROW of span
terminal DOT of span
terminal ELLIPSIS of span
terminal EQUAL of span
terminal SEAL of span
terminal SEMICOLON of span precr 0
terminal TIMES of span
terminal UNDERSCORE of span
terminal HASH of span

terminal ABSTYPE of span
terminal AND of span
terminal ANDALSO of span precl 2
terminal AS of span
terminal CASE of span
terminal DATATYPE of span
terminal DO of span
terminal ELSE of span
terminal END of span
terminal EQTYPE of span
terminal EXCEPTION of span
terminal FN of span
terminal FUN of span
terminal FUNCTOR of span
terminal HANDLE of span precr 0
terminal IF of span
terminal IN of span
terminal INCLUDE of span
terminal LET of span
terminal LOCAL of span
terminal OF of span
terminal OP of span
terminal OPEN of span
terminal ORELSE of span precl 1
terminal RAISE of span
terminal REC of span
terminal REF of span
terminal SHARING of span
terminal SIG of span
terminal SIGNATURE of span
terminal STRUCT of span
terminal STRUCTURE of span
terminal THEN of span
terminal TYPE of span
terminal VAL of span
terminal WHERE of span
terminal WHILE of span
terminal WITH of span
terminal WITHTYPE of span

terminal INFIX of span
terminal INFIXR of span
terminal NONFIX of span

terminal EOF of span

/*******************/
/* Deriving stuff. */
/*******************/

nonterminal Setting : setting =
  1:LIDENT EQUAL 2:LIDENT => mk_setting

nonterminal Settings : settings =
  1:Setting                  => sing_settings
  1:Setting COMMA 2:Settings => cons_settings

nonterminal Plugin : plugin =
  1:LIDENT                          => bare_plugin
  1:LIDENT LBRACE 2:Settings RBRACE => settings_plugin

nonterminal Plugins : plugins =
  1:Plugin                 => sing_plugins
  1:Plugin COMMA 2:Plugins => cons_plugins

nonterminal OptDeriving : optional_deriving =
  /* epsilon */ => none_deriving
  LBRACKET DOT 1:LIDENT 2:Plugins RBRACKET => some_deriving
               /* ^ "deriving" */

/*********************/
/* Identifier stuff. */
/*********************/

nonterminal BindableIdent : identifier =
   1:LIDENT => id_ident
   1:SIDENT => id_ident
   1:TIMES  => times_ident

nonterminal BindableIdents : identifiers =
   1:BindableIdent                  => sing_identifiers
   1:BindableIdent 2:BindableIdents => cons_identifiers

nonterminal Variable : identifier =
   1:LIDENT => id_ident
   1:SIDENT => id_ident
   1:TIMES  => times_ident
   1:EQUAL  => equal_ident
   1:REF    => ref_ident

nonterminal Constructor : identifier =
   1:UIDENT  => id_ident
   1:ULIDENT => id_ident
   1:USIDENT => id_ident

nonterminal BindableConstructor : identifier =
   1:UIDENT => id_ident

nonterminal TyIdent : identifier =
   1:LIDENT  => id_ident
   1:ULIDENT => id_ident
   1:REF     => ref_ident

nonterminal ModIdent : identifier =
   1:UIDENT  => id_ident

nonterminal LongVariable : longid =
   1:Variable                       => sing_longid
   1:ModIdent DOT 2:LongVariable    => cons_longid

nonterminal LongConstructor : longid =
   1:Constructor                    => sing_longid
   1:ModIdent DOT 2:LongConstructor => cons_longid

nonterminal TyLongid : longid =
   1:TyIdent                 => sing_longid
   1:ModIdent DOT 2:TyLongid => cons_longid

nonterminal ModLongid : longid =
   1:ModIdent                 => sing_longid
   1:ModIdent DOT 2:ModLongid => cons_longid

nonterminal Label : label =
   1:LIDENT => ident_label
   1:NUMBER => number_label
   /* TODO: Fix ambiguity with this and hex numbers. */

nonterminal OptionalOp : optional =
   /* epsilon */ => optional_false
   1:OP          => optional_true

/*********************/
/* Expression stuff. */
/*********************/

nonterminal Exprow : exprow =
  lab:Label EQUAL exp:Exp  => mk_exprow
nonterminal ExprowsWithoutEmpty : exprows =
  1:Exprow                 => sing_exprows
  1:Exprow COMMA 2:Exprows => cons_exprows
nonterminal Exprows : exprows =
  /* epsilon */            => nil_exprows
  1:ExprowsWithoutEmpty    => id_exprows

nonterminal ExpsNoEmpty : exps =
  1:Exp                     => sing_exps
  1:Exp COMMA 2:ExpsNoEmpty => cons_exps
nonterminal Exps : exps =
  1:ExpsNoEmpty             => id_exps
  /* epsilon */             => nil_exps

nonterminal Expseq : exps =
  1:Exp SEMICOLON 2:Exp              => pair_exps
  1:Exp SEMICOLON 2:Expseq           => cons_exps

nonterminal Atexp : exp =
  1:NUMBER                                                => num_exp
  1:WORD                                                  => word_exp
  1:REAL                                                  => real_exp
  1:STRING                                                => str_exp
  1:CHAR                                                  => char_exp
  1:OptionalOp 2:LongVariable                             => op_var_exp
  1:OptionalOp 2:LongConstructor                          => op_constr_exp
  left:LBRACE exprows:Exprows right:RBRACE                => record_exp
  1:HASH 2:Label                                          => select_exp
  left:LPAREN exps:Exps right:RPAREN                      => tuple_exp
  left:LBRACKET exps:ExpsNoEmpty right:RBRACKET           => list_exp
  left:LBRACKET right:RBRACKET                            => nil_exp
  left:LPAREN expseq:Expseq right:RPAREN                  => seq_exp
  left:LET dec:DecWithLocal IN exps:ExpsNoEmpty right:END => let_exp

nonterminal Matchrule : matchrule =
  pat:Pat DARROW exp:Exp  => mk_matchrule precr 0
/* TODO: Consider adding an extra bar, OCaml style. */
nonterminal Match : match =
  1:Matchrule             => sing_match   precr 0
  1:Matchrule BAR 2:Match => cons_match

nonterminal ExpJuxta : exp =
  /* NOTE: This seems wrong, but the Definition says it should be here.
  1:LongVariable         => var_ejuxta */
  1:Atexp                                     => atom_ejuxta
nonterminal ExpJuxtas : ejuxtas =
  left_exp:ExpJuxta right_exp:ExpJuxta        => pair_ejuxtas
  exp:ExpJuxta ejuxtas:ExpJuxtas              => cons_ejuxtas

nonterminal Exp : exp =
  1:ExpJuxtas                                  => ejuxtas_exp
  1:ExpJuxta                                   => id_exp
  exp:Exp COLON ty:Ty                          => typed_exp
  left:Exp ANDALSO right:Exp                   => andalso_exp
  left:Exp ORELSE right:Exp                    => orelse_exp
  exp:Exp HANDLE matches:Match                 => handle_exp
  left:RAISE exp:Exp                           => raise_exp precr 0
  left:IF exp1:Exp THEN exp2:Exp ELSE exp3:Exp => if_exp    precr 0
  left:WHILE exp1:Exp DO exp2:Exp              => while_exp precr 0
  left:CASE exp:Exp OF matches:Match           => case_exp
  left:FN matches:Match                        => fn_exp

/***************/
/* Type stuff. */
/***************/

nonterminal Tyrow : tyrow =
  lab:Label COLON ty:Ty              => mk_tyrow
nonterminal TyrowsNoEmpty : tyrows =
  1:Tyrow                            => sing_tyrows
  1:Tyrow COMMA 2:TyrowsNoEmpty => cons_tyrows
nonterminal Tyrows : tyrows =
  /* epsilon */                      => nil_tyrows
  1:TyrowsNoEmpty                    => id_tyrows

nonterminal Tyseq : tyseq =
  1:Ty COMMA 2:Ty    => pair_tyseq
  1:Ty COMMA 2:Tyseq => cons_tyseq

nonterminal TyAtom : ty =
  1:TyLongid                             => ident_ty
  1:TYVAR                                => tyvar_ty
  left:LPAREN ty:Ty right:RPAREN         => paren_ty
  left:LBRACE tyrows:Tyrows right:RBRACE => record_ty

nonterminal TyApp : ty =
  1:TyAtom                                    => id_ty
  1:TyApp 2:TyLongid                          => sing_tyapp
  left:LPAREN tyseq:Tyseq RPAREN con:TyLongid => mult_tyapp

nonterminal Typrod : typrod =
  1:TyApp                => sing_typrod
  1:TyApp TIMES 2:Typrod => cons_typrod

nonterminal Ty : ty =
  1:Typrod                    => prod_ty
  ty:Typrod ARROW ty':Ty      => arrow_ty
/* Hopefully this right-associates... */

/******************/
/* Pattern stuff. */
/******************/

nonterminal OptionalAnnotation : optional_ty =
  /* epsilon */  => none_ty
  COLON 1:Ty     => some_ty

nonterminal OptionalAsPattern : optional_pat =
  /* epsilon */ => none_pat
  AS 1:Pat      => some_pat

nonterminal Patrow : patrow =
  lab:Label EQUAL pat:Pat                                        => lab_patrow
  id:BindableIdent ty:OptionalAnnotation aspat:OptionalAsPattern => as_patrow
nonterminal PatrowsBase : patrows =
  /* epsilon */                                                  => nil_patrows
  ELLIPSIS                                                       => ellipsis_patrows
  1:Patrow                                                       => sing_patrows
nonterminal Patrows : patrows =
  1:PatrowsBase                                                  => base_patrows
  1:Patrow COMMA 2:Patrows                                       => cons_patrows

nonterminal Patseq : patseq =
  /* epsilon */        => nil_patseq
  1:Pat COMMA 2:Pat    => pair_patseq
  1:Pat COMMA 2:Patseq => cons_patseq
nonterminal PatseqTrue : patseq =
  1:Pat                => sing_patseq
  1:Patseq             => id_patseq

nonterminal AtpatWithoutIdent : pat =
  1:UNDERSCORE                                    => wild_pat
  1:NUMBER                                        => number_pat
  1:WORD                                          => word_pat
  1:STRING                                        => str_pat
  1:CHAR                                          => char_pat
  left:LBRACE    patrows:Patrows   right:RBRACE   => record_pat
  /* Moved these two here from PatJuxta. */
  1:LongConstructor                               => constr_pat
  opp:OP constr:LongConstructor                   => op_constr_pat
  left:LPAREN    patseq:Patseq     right:RPAREN   => tuple_pat
  LPAREN         1:PatUnchecked    RPAREN         => id_pat
  left:LBRACKET  patseq:PatseqTrue right:RBRACKET => list_pat
nonterminal Atpat : pat =
  1:BindableIdent                                 => ident_pat
  opp:OP id:BindableIdent                         => ident_op_pat
  1:AtpatWithoutIdent                             => id_pat
nonterminal Atpats : pats =
  1:Atpat                                        => sing_atpats
  1:Atpat 2:Atpats                               => cons_atpats

nonterminal Patjuxta : pat =
  1:Atpat                               => id_pjuxta
  1:REF                                 => ref_pat
nonterminal Patjuxtas : pjuxtas =
  1:Patjuxta 2:Patjuxta                 => pair_pjuxtas
  pat:Patjuxta pjuxtas:Patjuxtas        => cons_pjuxtas

nonterminal PatUnchecked : pat =
  1:Patjuxtas                                                      => pjuxtas_pat
  1:Patjuxta                                                       => pjuxta_pat
  pat:PatUnchecked COLON ty:Ty                                     => typed_pat
  id:BindableIdent AS pat:PatUnchecked                             => as_pat_bare precr 0
  /* TODO? id:BindableIdent COLON ty:Ty AS pat:PatUnchecked => as_pat_typed */
  /* Leave this out for now because of dumb ambiguities. */
  /* opp:OP id:BindableIdent ty:OptionalAnnotation AS pat:Pat => as_pat */
nonterminal Pat : pat =
  1:PatUnchecked                                                   => check_pat
/**************/
/* Dec stuff. */
/**************/

nonterminal Valbind : valbind =
  pat:Pat EQUAL exp:Exp                 => mk_valbind
nonterminal Valbinds : valbinds =
  1:Valbind                             => sing_valbinds
  1:Valbind AND 2:Valbinds              => cons_valbinds

nonterminal Tyvars : idents =
  1:TYVAR                                => sing_tyvars
  1:TYVAR COMMA 2:Tyvars                 => cons_tyvars
nonterminal TyvarsCheck : idents =
  1:Tyvars                               => check_tyvars
nonterminal Tyvarseq : tyvarseq =
  /* epsilon */                          => nil_tyvarseq
  1:TYVAR                                => sing_tyvarseq
  LPAREN 1:TyvarsCheck RPAREN            => id_tyvarseq
nonterminal TyvarseqNoEmpty : tyvarseq =
  1:TYVAR                                => sing_tyvarseq
  LPAREN 1:TyvarsCheck RPAREN            => id_tyvarseq

nonterminal OptionalRec : optional =
  /* epsilon */ => optional_false
  1:REC         => optional_true

nonterminal OptionalOfType : optional_ty =
  /* epsilon */ => none_ty
  OF 1:Ty       => some_ty

nonterminal OptionalInt : optional_int =
  /* epsilon */ => none_int
  1:NUMBER      => some_int

nonterminal OptionalSemicolon : optional =
  /* epsilon */ => optional_false
  1:SEMICOLON   => optional_true

nonterminal Fvalclause : fvalclause =
  id:BindableIdent atpats:Atpats ty:OptionalAnnotation EQUAL exp:Exp
                                                                  => mk_fvalclause_bare
  left:OP id:BindableIdent atpats:Atpats ty:OptionalAnnotation EQUAL exp:Exp
                                                                  => mk_fvalclause
  /* I'm axing infix fun declarations.
  /* We're side-stepping ambiguity regarding a `BindableIdent` on the left.
   * Need to fix this at precedence-time. */
  left_atpat:AtpatWithoutIdent id:BindableIdent right_atpat:Atpat ty:OptionalAnnotation
    EQUAL exp:Exp
                                                                  => infix_fvalclause
  /* This is bad, because this parens thing is actually subsumed by an Atpat, so
   * this is the same as the previous rule.
  left:LPAREN left_atpat:Atpat id:BindableIdent right_atpat:Atpat RPAREN
  atpats:AtpatsEmpty ty:OptionalAnnotation EQUAL exp:Exp      =>
  infix_extended_fvalclause */ */
nonterminal Fvalclauses : fvalclauses =
  1:Fvalclause                                                    => sing_fvalclauses precr 0
  1:Fvalclause BAR 2:Fvalclauses                                  => cons_fvalclauses

nonterminal Fvalbind : fvalbind =
  1:Fvalclauses              => id_fvalbind
nonterminal FvalbindsUnchecked : fvalbinds =
  1:Fvalbind                          => sing_fvalbinds precr 0
  1:Fvalbind AND 2:FvalbindsUnchecked => cons_fvalbinds
nonterminal Fvalbinds : fvalbinds =
  1:FvalbindsUnchecked       => check_fvalbinds

nonterminal Typbind : typbind =
  tyvars:Tyvarseq tycon:TyIdent EQUAL ty:Ty => mk_typbind
nonterminal TypbindsUnchecked : typbinds =
  1:Typbind                                 => sing_typbinds
  1:Typbind AND 2:TypbindsUnchecked         => cons_typbinds
nonterminal Typbinds : typbinds =
  1:TypbindsUnchecked => check_typbinds

nonterminal OptionalWithtype : optional_typbinds =
  /* epsilon */       => none_typbinds
  WITHTYPE 1:Typbinds => some_typbinds

nonterminal Conbind : conbind =
  opp:OptionalOp id:BindableConstructor ty:OptionalOfType => mk_conbind
nonterminal Conbinds : conbinds =
  1:Conbind                                               => sing_conbinds
  1:Conbind BAR 2:Conbinds                                => cons_conbinds
nonterminal ConbindsCheck : conbinds =
  1:Conbinds => check_conbinds

nonterminal Datbind : datbind =
  /* Same thing here as below. Weird parse ambiguity makes this necessary. */
  tycon:TyIdent EQUAL conbinds:ConbindsCheck deriving:OptDeriving      => mk_datbind_bare
  tyvars:TyvarseqNoEmpty tycon:TyIdent EQUAL conbinds:ConbindsCheck deriving:OptDeriving
                                                                       => mk_datbind

nonterminal Datbinds : datbinds =
  1:Datbind                                                    => sing_datbinds
  1:Datbind AND 2:Datbinds                                     => cons_datbinds

nonterminal Exbind : exbind =
  opp:OptionalOp id:BindableConstructor ty:OptionalOfType => mk_new_exbind
  left_opp:OptionalOp left_id:BindableConstructor EQUAL right_opp:OptionalOp
  right_id:LongConstructor                                => mk_repl_exbind
/* TODO: take this away */
nonterminal Exbinds : exbinds =
  1:Exbind                     => sing_exbinds
  1:Exbind AND 2:Exbinds       => cons_exbinds

nonterminal OpenIdents : longids =
  1:ModLongid              => sing_openids
  1:ModLongid 2:OpenIdents => cons_openids

nonterminal Dec : dec =
  /* Tyvarseq weirdness here again. */
  left:VAL recc:OptionalRec valbinds:Valbinds                                      => val_dec_bare
  left:VAL recc:OptionalRec tyvars:TyvarseqNoEmpty valbinds:Valbinds               => val_dec
  left:FUN tyvars:TyvarseqNoEmpty fvalbinds:Fvalbinds                              => fun_dec
  left:FUN fvalbinds:Fvalbinds                                                     => fun_dec_bare
  left:TYPE typbinds:Typbinds                                                      => ty_dec
  left:DATATYPE datbinds:Datbinds withtypee:OptionalWithtype                       => dat_dec
  left:DATATYPE left_tycon:TyIdent EQUAL DATATYPE right_tycon:TyLongid             => datrepl_dec
  left:ABSTYPE datbinds:Datbinds withtypee:OptionalWithtype WITH dec:DecWithLocal right:END
                                                                                   => absty_dec
  left:EXCEPTION exbinds:Exbinds                                                   => ex_dec
  left:OPEN ids:OpenIdents                                                         => open_dec
  left:INFIX precedence:OptionalInt ids:BindableIdents                             => infix_dec
  left:INFIXR precedence:OptionalInt ids:BindableIdents                            => infixr_dec
  left:NONFIX ids:BindableIdents                                                   => nonfix_dec
nonterminal Decs : dec =
  1:Dec                          => sing_decs
  1:Dec OptionalSemicolon 2:Decs => cons_decs
nonterminal DecWithLocal : dec =
  /* epsilon */                                                        => nil_decs
  1:Decs                                                               => id_decs
  left:LOCAL left_dec:DecWithLocal IN right_dec:DecWithLocal right:END => local_dec

/********************/
/* Signature stuff. */
/********************/

nonterminal Valdesc : valdesc =
  id:BindableIdent COLON ty:Ty => mk_valdesc

nonterminal Typdesc : typdesc =
  tyvars:Tyvarseq tycon:TyIdent deriving:OptDeriving             => mk_typdesc_abstract
  tyvars:Tyvarseq tycon:TyIdent EQUAL ty:Ty deriving:OptDeriving => mk_typdesc_concrete

nonterminal Condesc : condesc =
  1:BindableConstructor                 => id_condesc
  id:BindableConstructor OF ty:Ty       => ty_condesc
nonterminal Condescs : condescs =
  1:Condesc                             => sing_condescs
  1:Condesc BAR 2:Condescs              => cons_condescs

nonterminal Exdesc : exdesc =
  1:BindableConstructor             => id_exdesc
  id:BindableConstructor OF ty:Ty   => ty_exdesc

nonterminal Datdesc : datdesc =
  tycon:TyIdent EQUAL condescs:Condescs deriving:OptDeriving                 => mk_datdesc_bare
  tyvars:TyvarseqNoEmpty tycon:TyIdent EQUAL condescs:Condescs deriving:OptDeriving
                                                                             => mk_datdesc

nonterminal Strdesc : strdesc =
  id:ModIdent COLON signat:Signat       => mk_strdesc

nonterminal TypeEqs : longids =
  1:TyLongid EQUAL 2:TyLongid => pair_longids
  1:TyLongid EQUAL 2:TypeEqs  => cons_longids

nonterminal Spec : spec =
  left:VAL valdesc:Valdesc                                         => valdesc_spec
  left:TYPE typdesc:Typdesc                                        => typdesc_spec
  left:EQTYPE typdesc:Typdesc                                      => eqtype_spec
  left:DATATYPE datdesc:Datdesc                                    => datdesc_spec
  left:DATATYPE left_tycon:TyIdent EQUAL DATATYPE right_tycon:TyLongid
                                                                   => datrepl_spec
  left:EXCEPTION exdesc:Exdesc                                     => exdesc_spec
  left:STRUCTURE strdesc:Strdesc                                   => strdesc_spec
  left:INCLUDE signat:Signat                                       => include_spec
nonterminal Specseq : specs =
  1:Spec                                                           => sing_specs
  1:Specseq 2:Spec                                                 => cons_specs
  specs:Specseq SHARING TYPE tycons:TypeEqs                        => sharing_specs
nonterminal SpecseqPlusEmpty : specs =
  /* epsilon */                                                    => empty_specs
  1:Specseq                                                        => id_specs

nonterminal Signat : signat =
  left:SIG specs:SpecseqPlusEmpty right:END                        => spec_signat
  1:ModIdent                                                       => ident_signat
  signat:Signat WHERE TYPE tyvars:Tyvarseq id:TyLongid EQUAL ty:Ty => where_signat

/*****************/
/* Module stuff. */
/*****************/

nonterminal Module : module =
  left:STRUCT strdec:Strdec right:END            => struct_module
  1:ModLongid                                    => ident_module
  module:Module COLON signat:Signat              => transparent_module
  module:Module SEAL signat:Signat               => opaque_module
  id:ModIdent LPAREN module:Module RPAREN        => app_module
  left:LET dec:Strdec IN module:Module right:END => let_module

nonterminal Strbind : strbind =
  id:ModIdent EQUAL module:Module                     => mk_strbind_bare
  id:ModIdent COLON signat:Signat EQUAL module:Module => mk_strbind_seal_trans
  id:ModIdent SEAL signat:Signat EQUAL module:Module  => mk_strbind_seal_opaque
nonterminal Strbinds : strbinds =
  1:Strbind                                           => sing_strbinds
  1:Strbind AND 2:Strbinds                            => cons_strbinds


nonterminal StrdecAtom : strdec =
  left:STRUCTURE strbinds:Strbinds                                => structure_strdec
  left:LOCAL left_dec:Strdec IN right_dec:Strdec right:END        => local_strdec
  1:Dec                                                           => dec_strdec
nonterminal Strdecseq : strdec =
  1:StrdecAtom                                                    => id_strdec
  left_strdec:StrdecAtom OptionalSemicolon right_strdec:Strdecseq => cons_strdec
nonterminal Strdec : strdec =
  1:Strdecseq                                                     => id_strdec
  /* epsilon */                                                   => nil_strdec

nonterminal Sigbind : sigbind =
  id:ModIdent EQUAL signat:Signat => mk_sigbind
nonterminal Sigbinds : sigbinds =
  1:Sigbind                       => sing_sigbinds
  1:Sigbind AND 2:Sigbinds        => cons_sigbinds

nonterminal Sigdec : sigdec =
  left:SIGNATURE sigbinds:Sigbinds => mk_sigdec

nonterminal Funbind : funbind =
  id:ModIdent LPAREN arg_id:ModIdent COLON signat:Signat RPAREN EQUAL body:Module
                                                    => mk_funbind
nonterminal Funbinds : funbinds =
  1:Funbind                                         => sing_funbinds
  1:Funbind AND 2:Funbinds                          => cons_funbinds

nonterminal Fundec : fundec =
  left:FUNCTOR funbinds:Funbinds => mk_fundec

nonterminal Topdec : topdec =
  1:StrdecAtom => top_strdec /* TODO: Flatten this in parse.sml. */
  1:Sigdec     => top_sigdec
  1:Fundec     => top_fundec

nonterminal Topdecs : topdecs =
  EOF                => empty_program
  1:Topdec 2:Topdecs => cons_topdecs

start Topdecs
